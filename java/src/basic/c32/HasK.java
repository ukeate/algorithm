package basic.c32;

/**
 * 行列有序矩阵中查找目标值
 * 
 * 问题描述：给定一个二维矩阵，每行从左到右递增，每列从上到下递增，
 * 判断矩阵中是否包含目标值k
 * 
 * 解题思路：
 * 从右上角开始搜索（或者从左下角开始）
 * - 如果当前值等于目标值，找到了
 * - 如果当前值大于目标值，向左移动（排除当前列）
 * - 如果当前值小于目标值，向下移动（排除当前行）
 * 
 * 为什么从右上角开始？
 * - 右上角的元素在行上是最大的，在列上是最小的
 * - 这样可以明确决定下一步的搜索方向
 * 
 * 时间复杂度：O(M+N)，其中M是行数，N是列数
 * 空间复杂度：O(1)，只使用常数额外空间
 */
public class HasK {
    
    /**
     * 在行列有序矩阵中查找目标值
     * @param matrix 行列有序的二维矩阵
     * @param k 目标值
     * @return 如果矩阵中包含目标值则返回true，否则返回false
     */
    public static boolean has(int[][] matrix, int k) {
        // 从右上角开始搜索
        int row = 0;                        // 起始行：第一行
        int col = matrix[0].length - 1;     // 起始列：最后一列
        
        // 当位置有效时继续搜索
        while (row < matrix.length && col > -1) {
            if (matrix[row][col] == k) {
                // 找到目标值
                return true;
            } else if (matrix[row][col] > k) {
                // 当前值大于目标值，向左移动（排除当前列）
                col--;
            } else {
                // 当前值小于目标值，向下移动（排除当前行）
                row++;
            }
        }
        
        // 搜索完毕，未找到目标值
        return false;
    }

    public static void main(String[] args) {
        int[][] matrix = new int[][] { { 0, 1, 2, 3, 4, 5, 6 },// 0
                { 10, 12, 13, 15, 16, 17, 18 },// 1
                { 23, 24, 25, 26, 27, 28, 29 },// 2
                { 44, 45, 46, 47, 48, 49, 50 },// 3
                { 65, 66, 67, 68, 69, 70, 71 },// 4
                { 96, 97, 98, 99, 100, 111, 122 },// 5
                { 166, 176, 186, 187, 190, 195, 200 },// 6
                { 233, 243, 321, 341, 356, 370, 380 } // 7
        };
        int K = 233;
        System.out.println(has(matrix, K));
    }
}
