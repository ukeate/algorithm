package leetc.top;

/**
 * LeetCode 190. 颠倒二进制位 (Reverse Bits)
 * 
 * 问题描述：
 * 颠倒给定的32位无符号整数的二进制位。
 * 
 * 提示：
 * - 请注意，在某些语言（如Java）中，没有无符号整数类型。
 * - 在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，
 *   因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 * - 在Java中，编译器使用二进制补码记法来表示有符号整数。
 * 
 * 示例：
 * 输入：n = 00000010100101000001111010011100
 * 输出：   00111001011110000010100101000000
 * 返回：964176192 (表示二进制 00111001011110000010100101000000)
 * 
 * 解法思路：
 * 归并交换法（分治思想）：
 * 1. 将32位分成两个16位进行交换
 * 2. 将每个16位分成两个8位进行交换  
 * 3. 将每个8位分成两个4位进行交换
 * 4. 将每个4位分成两个2位进行交换
 * 5. 将每个2位分成两个1位进行交换
 * 
 * 算法原理：
 * - 类似于归并排序的分治思想
 * - 每一步都处理更小的位段
 * - 通过位运算实现高效的位交换
 * 
 * 位交换的技巧：
 * - 使用掩码提取特定位置的位
 * - 使用左移和右移实现位的交换
 * - 通过或运算合并交换后的结果
 * 
 * 具体步骤解析：
 * 1. (n >>> 16) | (n << 16)：交换高16位和低16位
 * 2. 0xff00ff00掩码：提取奇数字节，0x00ff00ff掩码：提取偶数字节
 * 3. 0xf0f0f0f0掩码：提取高4位，0x0f0f0f0f掩码：提取低4位
 * 4. 0xcccccccc掩码：提取高2位，0x33333333掩码：提取低2位
 * 5. 0xaaaaaaaa掩码：提取高1位，0x55555555掩码：提取低1位
 * 
 * 掩码含义：
 * - 0xff00ff00 = 11111111000000001111111100000000 (字节级)
 * - 0xf0f0f0f0 = 11110000111100001111000011110000 (半字节级)
 * - 0xcccccccc = 11001100110011001100110011001100 (2位级)
 * - 0xaaaaaaaa = 10101010101010101010101010101010 (1位级)
 * 
 * 时间复杂度：O(1) - 固定的5次位操作
 * 空间复杂度：O(1) - 只使用常数额外空间
 * 
 * LeetCode链接：https://leetcode.com/problems/reverse-bits/
 */
public class P190_ReverseBits {
    
    /**
     * 使用归并交换法颠倒32位整数的二进制位
     * 
     * @param n 32位无符号整数
     * @return 二进制位颠倒后的整数
     */
    public static int reverseBits(int n) {
        // 第1步：交换高16位和低16位
        // (n >>> 16)：将高16位移到低16位
        // (n << 16)：将低16位移到高16位
        n = (n >>> 16) | (n << 16);
        
        // 第2步：在每个16位内，交换高8位和低8位
        // 0xff00ff00提取奇数字节，右移8位
        // 0x00ff00ff提取偶数字节，左移8位
        n = ((n & 0xff00ff00) >>> 8) | ((n & 0x00ff00ff) << 8);
        
        // 第3步：在每个8位内，交换高4位和低4位
        // 0xf0f0f0f0提取高半字节，右移4位
        // 0x0f0f0f0f提取低半字节，左移4位
        n = ((n & 0xf0f0f0f0) >>> 4) | ((n & 0x0f0f0f0f) << 4);
        
        // 第4步：在每个4位内，交换高2位和低2位
        // 0xcccccccc提取高2位，右移2位
        // 0x33333333提取低2位，左移2位
        n = ((n & 0xcccccccc) >>> 2) | ((n & 0x33333333) << 2);
        
        // 第5步：在每个2位内，交换高1位和低1位
        // 0xaaaaaaaa提取奇数位，右移1位
        // 0x55555555提取偶数位，左移1位
        n = ((n & 0xaaaaaaaa) >>> 1) | ((n & 0x55555555) << 1);
        
        return n;
    }
}
