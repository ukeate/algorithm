package leetc.top;

/**
 * LeetCode 242. 有效的字母异位词 (Valid Anagram)
 * 
 * 问题描述：
 * 给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。
 * 注意：若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。
 * 
 * 示例：
 * 输入: s = "anagram", t = "nagaram"
 * 输出: true
 * 
 * 输入: s = "rat", t = "car"
 * 输出: false
 * 
 * 解法思路：
 * 字符计数法：
 * 1. 首先检查两个字符串长度是否相等，不相等则不可能是异位词
 * 2. 使用字符计数数组统计每个字符的出现次数
 * 3. 遍历第一个字符串，增加对应字符的计数
 * 4. 遍历第二个字符串，减少对应字符的计数
 * 5. 如果在减少计数时出现负数，说明第二个字符串有第一个字符串没有的字符或数量超出
 * 6. 遍历完成后，所有计数都应该为0
 * 
 * 核心思想：
 * - 字母异位词的本质是两个字符串包含相同的字符，只是顺序不同
 * - 通过字符计数可以忽略字符顺序，只关注字符种类和数量
 * - 使用数组而不是HashMap，因为字符范围有限，数组访问更快
 * 
 * 算法特点：
 * - 一次遍历：遍历两个字符串各一次
 * - 早期终止：一旦发现计数为负，立即返回false
 * - 空间优化：使用256大小的数组覆盖所有ASCII字符
 * 
 * 时间复杂度：O(n) - n为字符串长度，需要遍历两个字符串
 * 空间复杂度：O(1) - 使用固定大小的字符计数数组
 * 
 * LeetCode链接：https://leetcode.com/problems/valid-anagram/
 */
public class P242_ValidAnagram {
    
    /**
     * 判断两个字符串是否为字母异位词
     * 
     * 算法步骤：
     * 1. 长度检查：如果两个字符串长度不等，直接返回false
     * 2. 字符计数：遍历第一个字符串，统计每个字符出现次数
     * 3. 字符验证：遍历第二个字符串，减少对应字符计数
     * 4. 负数检查：如果计数变为负数，说明字符不匹配
     * 5. 完成检查：遍历完成后，所有字符计数应该都为0
     * 
     * 优化细节：
     * - 使用字符数组避免String.charAt()的开销
     * - 使用256大小数组覆盖所有ASCII字符
     * - 在减少计数时立即检查负数，实现早期终止
     * 
     * @param s 第一个字符串
     * @param t 第二个字符串
     * @return 是否为字母异位词
     */
    public static boolean isAnagram(String s, String t) {
        // 长度检查：异位词必须长度相等
        if (s.length() != t.length()) {
            return false;
        }
        
        // 转换为字符数组，提高访问效率
        char[] str = s.toCharArray();
        char[] tr = t.toCharArray();
        
        // 字符计数数组，索引为字符的ASCII值
        int[] count = new int[256];
        
        // 遍历第一个字符串，统计每个字符的出现次数
        for (char cha : str) {
            count[cha]++;  // 字符计数增加
        }
        
        // 遍历第二个字符串，减少对应字符的计数
        for (char cha : tr) {
            // 先减少计数，然后检查是否为负数
            if (--count[cha] < 0) {
                // 计数为负数说明：
                // 1. 第二个字符串包含第一个字符串没有的字符
                // 2. 某个字符在第二个字符串中出现次数超过第一个字符串
                return false;
            }
        }
        
        // 遍历完成，所有字符计数应该都为0
        // 如果程序执行到这里，说明两个字符串是字母异位词
        return true;
    }
}
