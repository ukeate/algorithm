package leetc.top;

/**
 * LeetCode 237. 删除链表中的节点 (Delete Node in a Linked List)
 * 
 * 问题描述：
 * 请编写一个函数，用于删除单链表中某个特定节点。在设计函数时需要注意，
 * 你无法访问链表的头节点 head ，只能直接访问要被删除的节点。
 * 题目数据保证需要删除的节点不是末尾节点。
 * 
 * 示例：
 * 输入：head = [4,5,1,9], node = 5
 * 输出：[4,1,9]
 * 解释：指定链表中值为 5 的第二个节点，那么在调用了你的函数之后，
 * 该链表应变为 4 -> 1 -> 9
 * 
 * 解法思路：
 * 值替换 + 删除下一个节点：
 * 1. 由于无法访问要删除节点的前驱，无法通过常规方法删除
 * 2. 巧妙思路：不删除当前节点，而是删除下一个节点
 * 3. 具体步骤：
 *    - 将下一个节点的值复制到当前节点
 *    - 删除下一个节点（调整当前节点的next指针）
 * 4. 效果上等同于删除了当前节点
 * 
 * 核心思想：
 * - 无法删除自己，但可以"变成"下一个节点，然后删除下一个节点
 * - 通过值替换实现"身份转换"
 * - 巧妙绕过了无法访问前驱节点的限制
 * 
 * 算法特点：
 * - 创新思路：问题转换，将删除当前节点转换为删除下一个节点
 * - 常数时间：只需要两个赋值操作
 * - 限制条件：节点不能是末尾节点（否则无下一个节点可删除）
 * 
 * 注意事项：
 * - 题目保证要删除的节点不是末尾节点
 * - 这种方法改变了节点值，在某些场景下可能不适用
 * - 如果节点值有特殊意义或约束，需要考虑副作用
 * 
 * 时间复杂度：O(1) - 常数时间操作
 * 空间复杂度：O(1) - 只使用常数额外空间
 * 
 * LeetCode链接：https://leetcode.com/problems/delete-node-in-a-linked-list/
 */
public class P237_DeleteNodeInALinkedList {
    
    /**
     * 链表节点定义
     */
    public static class ListNode {
        int val;         // 节点值
        ListNode next;   // 指向下一个节点的指针
    }

    /**
     * 删除链表中的指定节点
     * 
     * 算法步骤：
     * 1. 将下一个节点的值复制到当前节点
     * 2. 将当前节点的next指针指向下下个节点
     * 3. 这样就"删除"了下一个节点，而当前节点变成了原来下一个节点的"替身"
     * 
     * 图解过程：
     * 原始：A -> B -> C -> D（要删除B）
     * 步骤1：A -> C -> C -> D（将C的值复制到B）
     * 步骤2：A -> C -> D（调整B的next指针，跳过原来的C）
     * 结果：A -> C -> D（看起来B被删除了）
     * 
     * 实际上：原来的B节点还在，但它的值和指针都变成了原来C的样子
     * 原来的C节点被删除了，但从外部看起来是B被删除了
     * 
     * @param node 要删除的节点（保证不是末尾节点）
     */
    public void deleteNode(ListNode node) {
        // 将下一个节点的值复制到当前节点（身份转换）
        node.val = node.next.val;
        
        // 删除下一个节点（调整指针，跳过下一个节点）
        node.next = node.next.next;
    }
}
